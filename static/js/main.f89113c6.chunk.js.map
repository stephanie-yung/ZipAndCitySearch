{"version":3,"sources":["City.js","ZipSearch.js","citySearch.js","App.js","reportWebVitals.js","index.js"],"names":["City","data","State","style","listStylePosition","Lat","Long","EstimatedPopulation","TotalWages","ZipSearch","props","handleZipChange","event","setState","zipCode","target","value","handleZipSubmit","preventDefault","fetchCities","a","zip","state","console","log","axios","get","response","responseData","cities","invalidZip","className","onSubmit","this","fontWeight","type","onChange","placeholder","map","city","React","Component","CitySearchAPI","handleInputChange","handleSearchClick","cityName","toUpperCase","apiData","found","status","getZipCodes","currData","table","newData","i","length","push","pop","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f89113c6.chunk.js","sourcesContent":["import React from 'react';\n\nconst City = ({data}) => {\n    return (\n        <div>\n            <h1>{data.City}, {data.State}</h1>\n            <ul style={{listStylePosition: \"inside\"}}>\n                <li>State: {data.State}</li>\n                <li>Location: ({data.Lat}, {data.Long})</li>\n                <li>Population (estimated): {data.EstimatedPopulation}</li>\n                <li>Total Wages: {data.TotalWages}</li>\n            </ul>\n        </div>\n    )\n}\n\nexport default City","import React from 'react';\nimport axios from 'axios';\nimport City from './City';\nimport './App.css';\n\nclass ZipSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      zipCode: '', // for value in zip search bar\n      cities: [], // list of cities gotten from zip search bar\n      invalidZip: false,\n    }\n  }\n\n  //When zipcode changes in search bar\n  handleZipChange = (event) => {\n    this.setState({\n      zipCode: event.target.value\n    })\n  }\n\n  //When zipcode is submitted\n  handleZipSubmit = (event) => {\n    // alert('Zip was submitted: ' + this.state.zipCode);\n    event.preventDefault();\n    this.fetchCities();\n  }\n\n  //get city information\n  fetchCities = async () => {\n    try {\n      let zip = this.state.zipCode;\n      console.log(zip);\n      let response = await axios.get(`https://ctp-zip-api.herokuapp.com/zip/${zip}`);\n      let responseData = await response.data;\n      console.log(responseData);\n\n      this.setState({\n        cities: responseData,\n        invalidZip: false,\n      });\n\n    } catch (error) {\n      console.log(error);\n      \n      this.setState({\n        invalidZip: true\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Zip and City Search</h1>\n        <form onSubmit={this.handleZipSubmit}>\n          <label style={{fontWeight: \"bold\"}}>\n            Zip Code:&nbsp;\n            <input\n              type=\"text\" \n              value={this.state.zipCode}\n              onChange={this.handleZipChange} placeholder=\"Try 10016\"\n            />\n          </label>\n          <input type=\"submit\" value=\"Search\" />\n        </form>\n\n        {/* render city components */\n          this.state.invalidZip ?\n          <h7>No Results</h7>\n          :\n          this.state.cities.map( (city) => {\n            return (\n              <div>\n                <City data={city} />\n              </div>\n            )\n          })\n        }\n        \n\n      </div>\n    );\n  }\n}\n\nexport default ZipSearch;\n","import { Component } from 'react';\nimport axios from 'axios';\n\nclass CitySearchAPI extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            apiData: [],\n            city: \"\",\n            found: true\n        }\n    }\n\n    handleInputChange = (event) => {\n        this.setState({city: event.target.value});\n    }\n\n    handleSearchClick = async () => {\n        try {\n            let cityName = this.state.city.toUpperCase();\n\n            let response = await axios.get(`https://ctp-zip-api.herokuapp.com/city/${cityName}`);\n            this.setState({apiData: response.data, found: true});\n        } catch (error) {\n                if (error.response) {\n                    console.log(error.response.data); //Not Found\n                    console.log(error.response.status); //404\n                    this.setState({found: false});\n                }\n        }\n    }\n    \n    getZipCodes = () => {\n        let currData = this.state.apiData;\n        let foundMatch = this.state.found;\n        let table = [];\n        let newData = [];\n        //found is false when we get 404 error\n        if(!foundMatch) {\n            table.push(<h7> No Results </h7>);\n            return table;\n        } else {\n            var i;\n            for (i =0; i < currData.length; i++) {\n                newData.push(currData[i]);\n                newData.push(\", \");\n            }\n            newData.pop();\n\n            return newData;\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <div className = \"search\">\n                    <label style={{fontWeight: \"bold\"}}>City name: </label>\n                    <input type=\"text\" value={this.state.city} onChange={this.handleInputChange} placeholder=\"Enter city name\"/>\n                    <button className=\"search-button\" onClick={this.handleSearchClick}>Search</button>\n                </div>\n                <br/>\n                { this.getZipCodes() }\n            </div>\n        )\n    }\n}\n\nexport default CitySearchAPI;","import './App.css';\nimport ZipSearch from './ZipSearch.js'\nimport CitySearchAPI from './citySearch.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ZipSearch />\n        <CitySearchAPI />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}